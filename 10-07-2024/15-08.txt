

860. Lemonade Change
Solved
Easy
Topics
Companies
At a lemonade stand, each lemonade costs $5. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a $5, $10, or $20 bill. You must provide the correct change to each customer so that the net transaction is that the customer pays $5.

Note that you do not have any change in hand at first.

Given an integer array bills where bills[i] is the bill the ith customer pays, return true if you can provide every customer with the correct change, or false otherwise.

 

Example 1:

Input: bills = [5,5,5,10,20]
Output: true
Explanation: 
From the first 3 customers, we collect three $5 bills in order.
From the fourth customer, we collect a $10 bill and give back a $5.
From the fifth customer, we give a $10 bill and a $5 bill.
Since all customers got correct change, we output true.
Example 2:

Input: bills = [5,5,10,10,20]
Output: false
Explanation: 
From the first two customers in order, we collect two $5 bills.
For the next two customers in order, we collect a $10 bill and give back a $5 bill.
For the last customer, we can not give the change of $15 back because we only have two $10 bills.
Since not every customer received the correct change, the answer is false.
 

Constraints:

1 <= bills.length <= 105
bills[i] is either 5, 10, or 20.



ans:::

// Counters for the number of $5 and $10 bills
        int fiveCount = 0;
        int tenCount = 0;

        // Iterate through each bill in the array
        for (int bill : bills) {
            // If the customer pays with a $5 bill, just increment the $5 bill count
            if (bill == 5) {
                fiveCount++;
            } 
            // If the customer pays with a $10 bill
            else if (bill == 10) {
                // Check if we have a $5 bill to give as change
                if (fiveCount > 0) {
                    fiveCount--;
                    tenCount++;
                } else {
                    return false; // Can't provide the correct change
                }
            } 
            // If the customer pays with a $20 bill
            else if (bill == 20) {
                // Prefer to give one $10 bill and one $5 bill as change
                if (tenCount > 0 && fiveCount > 0) {
                    tenCount--;
                    fiveCount--;
                } 
                // If no $10 bill is available, give three $5 bills as change
                else if (fiveCount >= 3) {
                    fiveCount -= 3;
                } else {
                    return false; // Can't provide the correct change
                }
            }
        }

        // If we successfully process all the bills, return true
        return true;
    }

***************************************************************************


2441. Largest Positive Integer That Exists With Its Negative
Solved
Easy
Topics
Companies
Hint
Given an integer array nums that does not contain any zeros, find the largest positive integer k such that -k also exists in the array.

Return the positive integer k. If there is no such integer, return -1.

 

Example 1:

Input: nums = [-1,2,-3,3]
Output: 3
Explanation: 3 is the only valid k we can find in the array.
Example 2:

Input: nums = [-1,10,6,7,-7,1]
Output: 7
Explanation: Both 1 and 7 have their corresponding negative values in the array. 7 has a larger value.
Example 3:

Input: nums = [-10,8,6,7,-2,-3]
Output: -1
Explanation: There is no a single valid k, we return -1.
 

Constraints:

1 <= nums.length <= 1000
-1000 <= nums[i] <= 1000
nums[i] != 0

ans::

class Solution {
    public int findMaxK(int[] nums) {

    Set<Integer>set=new HashSet<>();
    int max =0;

        for(int a:nums){

            
            set.add(a);
        }

    Arrays.sort(nums);
    
    for(int a=nums.length-1;a>=0;a--){
        System.out.println(a);
        int temp=nums[a];
        int find =-temp;
        System.out.println(temp+""+find);
        if(set.contains(find)==true){
            max=Math.abs(find-0);
            break;
        }else{
            max=-1;
        }
    }
      return max;  
    }
}

**************************************************