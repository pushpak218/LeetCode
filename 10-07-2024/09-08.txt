804. Unique Morse Code Words
Solved
Easy
Topics
Companies
International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:

'a' maps to ".-",
'b' maps to "-...",
'c' maps to "-.-.", and so on.
For convenience, the full table for the 26 letters of the English alphabet is given below:

[".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."]
Given an array of strings words where each word can be written as a concatenation of the Morse code of each letter.

For example, "cab" can be written as "-.-..--...", which is the concatenation of "-.-.", ".-", and "-...". We will call such a concatenation the transformation of a word.
Return the number of different transformations among all words we have.

 

Example 1:

Input: words = ["gin","zen","gig","msg"]
Output: 2
Explanation: The transformation of each word is:
"gin" -> "--...-."
"zen" -> "--...-."
"gig" -> "--...--."
"msg" -> "--...--."
There are 2 different transformations: "--...-." and "--...--.".
Example 2:

Input: words = ["a"]
Output: 1
 

Constraints:

1 <= words.length <= 100
1 <= words[i].length <= 12
words[i] consists of lowercase English letters.


ans::

class Solution {
    public int uniqueMorseRepresentations(String[] words) {

        int count=0;
        Set<String>set=new HashSet<>();
     String[] arr= {".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."};
    
    for(String a:words){
        String temp2="";
        char [] arr2=a.toCharArray();
        for(int b=0;b<arr2.length;b++){
            int no=(arr2[b]-97);
            temp2+=arr[no];
        }

        set.add(temp2);
        System.out.println(temp2);
        
    }

    count=set.size();

     return count;   
    }
}

*****************************************************


349. Intersection of Two Arrays
Easy
Topics
Companies
Given two integer arrays nums1 and nums2, return an array of their 
intersection
. Each element in the result must be unique and you may return the result in any order.

 

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Explanation: [4,9] is also accepted.
 

Constraints:

1 <= nums1.length, nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 1000


ans::

class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {

        List<Integer>list=new ArrayList<>();

        for(int a:nums1){

            for(int b=0;b<nums2.length;b++){
                if(a==nums2[b] && list.contains(a)==false){
                    list.add(a);
                }
            }
        }

        int [] ans=new int[list.size()];

        int point=0;

        for(int a:list){
            ans[point]=a;
            point++;
        }
      return ans;  
    }
}

******************************************************************