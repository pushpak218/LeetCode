
Code
Testcase
Testcase
Test Result
1716. Calculate Money in Leetcode Bank
Solved
Easy
Topics
Companies
Hint
Hercy wants to save money for his first car. He puts money in the Leetcode bank every day.

He starts by putting in $1 on Monday, the first day. Every day from Tuesday to Sunday, he will put in $1 more than the day before. On every subsequent Monday, he will put in $1 more than the previous Monday.
Given n, return the total amount of money he will have in the Leetcode bank at the end of the nth day.

 

Example 1:

Input: n = 4
Output: 10
Explanation: After the 4th day, the total is 1 + 2 + 3 + 4 = 10.
Example 2:

Input: n = 10
Output: 37
Explanation: After the 10th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on the 2nd Monday, Hercy only puts in $2.
Example 3:

Input: n = 20
Output: 96
Explanation: After the 20th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96.
 

Constraints:

1 <= n <= 1000

ans::
class Solution {
    public int totalMoney(int n) {

        int week=0;
        int ans=0;
        for(int a=1;a<=n;a++){
            int add=a%7;
            System.out.println("add"+add);
            System.out.println("week"+week);
            ans+=week+add;
            System.out.println(ans);
            if(a%7==0){
                ans=ans-week-add;
                ans+=7+week;
                week++;
            }
        }
        
      return ans;  
    }
}

*******************************************************

1979. Find Greatest Common Divisor of Array
Easy
Topics
Companies
Hint
Given an integer array nums, return the greatest common divisor of the smallest number and largest number in nums.

The greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers.

 

Example 1:

Input: nums = [2,5,6,9,10]
Output: 2
Explanation:
The smallest number in nums is 2.
The largest number in nums is 10.
The greatest common divisor of 2 and 10 is 2.
Example 2:

Input: nums = [7,5,6,8,3]
Output: 1
Explanation:
The smallest number in nums is 3.
The largest number in nums is 8.
The greatest common divisor of 3 and 8 is 1.
Example 3:

Input: nums = [3,3]
Output: 3
Explanation:
The smallest number in nums is 3.
The largest number in nums is 3.
The greatest common divisor of 3 and 3 is 3.
 

Constraints:

2 <= nums.length <= 1000
1 <= nums[i] <= 1000
ans::

class Solution {
    public int findGCD(int[] nums) {

        Arrays.sort(nums);

        int small=nums[0];
        int large=nums[nums.length-1];
        int gcd=0;
        for(int a=1;a<=small;a++){

            if(small%a==0 && large%a==0){
                gcd=Math.max(gcd,a);
            }

        }
       return gcd; 
    }
}

******************************


1748. Sum of Unique Elements
Easy
Topics
Companies
Hint
You are given an integer array nums. The unique elements of an array are the elements that appear exactly once in the array.

Return the sum of all the unique elements of nums.

 

Example 1:

Input: nums = [1,2,3,2]
Output: 4
Explanation: The unique elements are [1,3], and the sum is 4.
Example 2:

Input: nums = [1,1,1,1,1]
Output: 0
Explanation: There are no unique elements, and the sum is 0.
Example 3:

Input: nums = [1,2,3,4,5]
Output: 15
Explanation: The unique elements are [1,2,3,4,5], and the sum is 15.
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100

ans::

import java.util.Map.Entry;
class Solution {
    public int sumOfUnique(int[] nums) {

        Map<Integer,Integer>map=new HashMap<>();
        int ans=0;
        for(int a:nums){
            int no=a;
            map.put(a,map.getOrDefault(a,0)+1);
        }

        System.out.println(map);

        
     for(Entry<Integer, Integer> entry: map.entrySet()) {

      // if give value is equal to value from entry
      // print the corresponding key
      if(entry.getValue() == 1) {
        ans+=entry.getKey();
        
      }
    }
       return ans; 
    }
}
****************************************************



1374. Generate a String With Characters That Have Odd Counts
Easy
Topics
Companies
Hint
Given an integer n, return a string with n characters such that each character in such string occurs an odd number of times.

The returned string must contain only lowercase English letters. If there are multiples valid strings, return any of them.  

 

Example 1:

Input: n = 4
Output: "pppz"
Explanation: "pppz" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as "ohhh" and "love".
Example 2:

Input: n = 2
Output: "xy"
Explanation: "xy" is a valid string since the characters 'x' and 'y' occur once. Note that there are many other valid strings such as "ag" and "ur".
Example 3:

Input: n = 7
Output: "holasss"
 

Constraints:

1 <= n <= 500

ans::

class Solution {
    public String generateTheString(int n) {
        char [] ans=new char[n];

        if(n%2==0){
            for(int a=0;a<n-1;a++){
                ans[a]='a';
                }
                ans[n-1]='b';
        }else{
            for(int b=0;b<n;b++){
                ans[b]='a';
            }
        }
     return new String(ans) ;  
    }
}

**************************************************

1941. Check if All Characters Have Equal Number of Occurrences
Easy
Topics
Companies
Hint
Given a string s, return true if s is a good string, or false otherwise.

A string s is good if all the characters that appear in s have the same number of occurrences (i.e., the same frequency).

 

Example 1:

Input: s = "abacbc"
Output: true
Explanation: The characters that appear in s are 'a', 'b', and 'c'. All characters occur 2 times in s.
Example 2:

Input: s = "aaabb"
Output: false
Explanation: The characters that appear in s are 'a' and 'b'.
'a' occurs 3 times while 'b' occurs 2 times, which is not the same number of times.
 

Constraints:

1 <= s.length <= 1000
s consists of lowercase English letters.


ans::

class Solution {
    public boolean areOccurrencesEqual(String s) {

        char [] arr= s.toCharArray();

        Map<Character,Integer>map=new HashMap<>();

        Set<Character>set=new HashSet();

        for(char a:arr){
            map.put(a,map.getOrDefault(a,0)+1);
            set.add(a);
        }

        System.out.println(map);

        int frq=map.get(s.charAt(0));

        boolean ans=true;

        for(char a:set){
            if(map.get(a)!=frq){
                ans=false;
            }
        }


      return ans;  
        
    }
}

****************************************************************