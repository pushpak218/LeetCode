2670. Find the Distinct Difference Array
Easy
Topics
Companies
Hint
You are given a 0-indexed array nums of length n.

The distinct difference array of nums is an array diff of length n such that diff[i] is equal to the number of distinct elements in the suffix nums[i + 1, ..., n - 1] subtracted from the number of distinct elements in the prefix nums[0, ..., i].

Return the distinct difference array of nums.

Note that nums[i, ..., j] denotes the subarray of nums starting at index i and ending at index j inclusive. Particularly, if i > j then nums[i, ..., j] denotes an empty subarray.

 

Example 1:

Input: nums = [1,2,3,4,5]
Output: [-3,-1,1,3,5]
Explanation: For index i = 0, there is 1 element in the prefix and 4 distinct elements in the suffix. Thus, diff[0] = 1 - 4 = -3.
For index i = 1, there are 2 distinct elements in the prefix and 3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1.
For index i = 2, there are 3 distinct elements in the prefix and 2 distinct elements in the suffix. Thus, diff[2] = 3 - 2 = 1.
For index i = 3, there are 4 distinct elements in the prefix and 1 distinct element in the suffix. Thus, diff[3] = 4 - 1 = 3.
For index i = 4, there are 5 distinct elements in the prefix and no elements in the suffix. Thus, diff[4] = 5 - 0 = 5.
Example 2:

Input: nums = [3,2,3,4,2]
Output: [-2,-1,0,2,3]
Explanation: For index i = 0, there is 1 element in the prefix and 3 distinct elements in the suffix. Thus, diff[0] = 1 - 3 = -2.
For index i = 1, there are 2 distinct elements in the prefix and 3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1.
For index i = 2, there are 2 distinct elements in the prefix and 2 distinct elements in the suffix. Thus, diff[2] = 2 - 2 = 0.
For index i = 3, there are 3 distinct elements in the prefix and 1 distinct element in the suffix. Thus, diff[3] = 3 - 1 = 2.
For index i = 4, there are 3 distinct elements in the prefix and no elements in the suffix. Thus, diff[4] = 3 - 0 = 3.
 

Constraints:

1 <= n == nums.length <= 50
1 <= nums[i] <= 50

ans::
class Solution {
    public int[] distinctDifferenceArray(int[] nums) {

        Set<Integer>pre=new HashSet<>();
        Set<Integer>suff=new HashSet<>();
        int [] ans=new int [nums.length];
        for(int a=0;a<nums.length;a++){

            if(a==0){
                pre.clear();
                suff.clear();
                for(int b=a+1;b<nums.length;b++){
                    suff.add(nums[b]);
                }

                ans[a]=(1+pre.size())-suff.size();
            } else if(a==nums.length-1){
                pre.clear();
                suff.clear();
                for(int c=0;c<nums.length;c++){
                    pre.add(nums[c]);
                }
                ans[a]=pre.size()-suff.size();
            }else{
                pre.clear();
                suff.clear();
                for(int d=0;d<=a;d++){
                    pre.add(nums[d]);
                }

                for(int e=a+1;e<nums.length;e++){
                    suff.add(nums[e]);
                }

                ans[a]=pre.size()-suff.size();
            }


        }
        

        return ans;
    }
}


********************************************

Given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid.

 

Example 1:

Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
Output: 8
Explanation: There are 8 negatives number in the matrix.
Example 2:

Input: grid = [[3,2],[1,0]]
Output: 0
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 100
-100 <= grid[i][j] <= 100

ans::

class Solution {
    public int countNegatives(int[][] grid) {

        int count=0;

        int g =grid.length;
        int h=grid[0].length;

        System.out.println(g);
        System.out.println(h);

        for( int a=0;a<grid.length;a++){
            for(int b=0;b<grid[0].length;b++){
                if(grid[a][b]<0){
                    count++;
                }
            }
        }
       return count; 
    }
}

***********************************************

1295. Find Numbers with Even Number of Digits
Easy
Topics
Companies
Hint
Given an array nums of integers, return how many of them contain an even number of digits.

 

Example 1:

Input: nums = [12,345,2,6,7896]
Output: 2
Explanation: 
12 contains 2 digits (even number of digits). 
345 contains 3 digits (odd number of digits). 
2 contains 1 digit (odd number of digits). 
6 contains 1 digit (odd number of digits). 
7896 contains 4 digits (even number of digits). 
Therefore only 12 and 7896 contain an even number of digits.
Example 2:

Input: nums = [555,901,482,1771]
Output: 1 
Explanation: 
Only 1771 contains an even number of digits.
 

Constraints:

1 <= nums.length <= 500
1 <= nums[i] <= 105

ans::

class Solution {
    public int findNumbers(int[] nums) {
        int count=0;

        for(int a:nums){
            String str=String.valueOf(a);
            if(str.length()%2==0){
                count++;
            }
        }
        return count;
    }
}

****************************************************

1207. Unique Number of Occurrences
Easy
Topics
Companies
Hint
Given an array of integers arr, return true if the number of occurrences of each value in the array is unique or false otherwise.

 

Example 1:

Input: arr = [1,2,2,1,1,3]
Output: true
Explanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.
Example 2:

Input: arr = [1,2]
Output: false
Example 3:

Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]
Output: true
 

Constraints:

1 <= arr.length <= 1000
-1000 <= arr[i] <= 1000

ans::

class Solution {
    public boolean uniqueOccurrences(int[] arr) {

        boolean flag= true;

        Set<Integer> set= new HashSet<>();

        Map<Integer,Integer> map=new HashMap<>();
        

        for(int a:arr){
            map.put(a,map.getOrDefault(a,0)+1);
        }

        for(int a:map.values()){
            if(!set.add(a)){
                flag=false;
            }
        }

        return flag;
    }
}

**********************************************
