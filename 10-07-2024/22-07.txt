2418. Sort the People
Solved
Easy
Topics
Companies
Hint
You are given an array of strings names, and an array heights that consists of distinct positive integers. Both arrays are of length n.

For each index i, names[i] and heights[i] denote the name and height of the ith person.

Return names sorted in descending order by the people's heights.

 

Example 1:

Input: names = ["Mary","John","Emma"], heights = [180,165,170]
Output: ["Mary","Emma","John"]
Explanation: Mary is the tallest, followed by Emma and John.
Example 2:

Input: names = ["Alice","Bob","Bob"], heights = [155,185,150]
Output: ["Bob","Alice","Bob"]
Explanation: The first Bob is the tallest, followed by Alice and the second Bob.
 

Constraints:

n == names.length == heights.length
1 <= n <= 103
1 <= names[i].length <= 20
1 <= heights[i] <= 105
names[i] consists of lower and upper case English letters.
All the values of heights are distinct.

ans::

class Solution {
    public String[] sortPeople(String[] names, int[] heights) {

        Map<Integer,String> map=new HashMap<>();
        String [] ans=new String[names.length];
        for(int a=0;a<names.length;a++){
            map.put(heights[a],names[a]);
        }

        Arrays.sort(heights);
        int point=0;
        for(int a=names.length-1;a>=0;a--){

            ans[point]=map.get(heights[a]);
            point++;
        }

       return ans; 
    }
}

*********************************************************************
2965. Find Missing and Repeated Values
Solved
Easy
Topics
Companies
You are given a 0-indexed 2D integer matrix grid of size n * n with values in the range [1, n2]. Each integer appears exactly once except a which appears twice and b which is missing. The task is to find the repeating and missing numbers a and b.

Return a 0-indexed integer array ans of size 2 where ans[0] equals to a and ans[1] equals to b.

 

Example 1:

Input: grid = [[1,3],[2,2]]
Output: [2,4]
Explanation: Number 2 is repeated and number 4 is missing so the answer is [2,4].
Example 2:

Input: grid = [[9,1,7],[8,9,2],[3,4,6]]
Output: [9,5]
Explanation: Number 9 is repeated and number 5 is missing so the answer is [9,5].
 

Constraints:

2 <= n == grid.length == grid[i].length <= 50
1 <= grid[i][j] <= n * n
For all x that 1 <= x <= n * n there is exactly one x that is not equal to any of the grid members.
For all x that 1 <= x <= n * n there is exactly one x that is equal to exactly two of the grid members.
For all x that 1 <= x <= n * n except two of them there is exatly one pair of i, j that 0 <= i, j <= n - 1 and grid[i][j] == x.

ans::

class Solution {
    public int[] findMissingAndRepeatedValues(int[][] grid) {

        int n=grid.length;
        int [] ans= new int[2];
        Map<Integer,Integer> map = new HashMap<>();
        for(int[] a:grid){

            
                
                for(int c:a){
                    
                        map.put(c,map.getOrDefault(c,0)+1);
                    
                        
                        
                    }
                }
            

            System.out.println(map);

            
        

        for(int a=1;a<=n*n;a++){

            if(map.containsKey(a)==false){
                ans[1]=a;
            }else if(map.get(a)==2){
                ans[0]=a;
            }
        }
        return ans;
    }
}

*********************************************************************

226. Invert Binary Tree
Easy
Topics
Companies
Given the root of a binary tree, invert the tree, and return its root.

 

Example 1:


Input: root = [4,2,7,1,3,6,9]
Output: [4,7,2,9,6,3,1]
Example 2:


Input: root = [2,1,3]
Output: [2,3,1]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

ans::

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {

        if(root==null){
            return null;
        }

        Queue<TreeNode> queue= new LinkedList<>();

        queue.add(root);

        while(!queue.isEmpty()){

            TreeNode current=queue.poll();

            TreeNode temp=current.left;
            current.left=current.right;
            current.right=temp;

            if(current.left!=null){
                queue.add(current.left);
            } 

            if(current.right!=null){
                queue.add(current.right);
            }
        }
        return root;
    }
}

**************************************************************************


Second Highest salary::
SELECT (
    SELECT DISTINCT salary
    FROM Employee
    ORDER BY salary DESC
    LIMIT 1 OFFSET 1
) AS SecondHighestSalary;

**************************************************

2610. Convert an Array Into a 2D Array With Conditions
Medium
Topics
Companies
Hint
You are given an integer array nums. You need to create a 2D array from nums satisfying the following conditions:

The 2D array should contain only the elements of the array nums.
Each row in the 2D array contains distinct integers.
The number of rows in the 2D array should be minimal.
Return the resulting array. If there are multiple answers, return any of them.

Note that the 2D array can have a different number of elements on each row.

 

Example 1:

Input: nums = [1,3,4,1,2,3,1]
Output: [[1,3,4,2],[1,3],[1]]
Explanation: We can create a 2D array that contains the following rows:
- 1,3,4,2
- 1,3
- 1
All elements of nums were used, and each row of the 2D array contains distinct integers, so it is a valid answer.
It can be shown that we cannot have less than 3 rows in a valid array.
Example 2:

Input: nums = [1,2,3,4]
Output: [[4,3,2,1]]
Explanation: All elements of the array are distinct, so we can keep all of them in the first row of the 2D array.
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= nums.length

ans::

class Solution {
    public List<List<Integer>> findMatrix(int[] nums) {

       

        Map<Integer,Integer> map= new HashMap<>();
        Set<Integer> set = new HashSet<>();
         
        for(int a:nums){

            map.put(a,map.getOrDefault(a,0)+1);
            set.add(a);
        }
        System.out.println(map);
        List<List<Integer>> ans=new ArrayList<>();

        int frq=0;

       
        for(int a:map.values()){
            frq=Math.max(frq,a);
        }

        System.out.println(frq);

         while(frq>0){
            List<Integer> list= new ArrayList<>();

            for(int a:set){
            
            if(map.get(a)>0 ){
                list.add(a);
                map.put(a,map.getOrDefault(a,0)-1);
            }
            
        }
        ans.add(list);
        System.out.println(map);
            frq--;
        }


        



       return ans; 
    }
}

*******************************************************************

