
2191. Sort the Jumbled Numbers
Solved
Medium
Topics
Companies
Hint
You are given a 0-indexed integer array mapping which represents the mapping rule of a shuffled decimal system. mapping[i] = j means digit i should be mapped to digit j in this system.

The mapped value of an integer is the new integer obtained by replacing each occurrence of digit i in the integer with mapping[i] for all 0 <= i <= 9.

You are also given another integer array nums. Return the array nums sorted in non-decreasing order based on the mapped values of its elements.

Notes:

Elements with the same mapped values should appear in the same relative order as in the input.
The elements of nums should only be sorted based on their mapped values and not be replaced by them.
 

Example 1:

Input: mapping = [8,9,4,0,2,1,3,5,7,6], nums = [991,338,38]
Output: [338,38,991]
Explanation: 
Map the number 991 as follows:
1. mapping[9] = 6, so all occurrences of the digit 9 will become 6.
2. mapping[1] = 9, so all occurrences of the digit 1 will become 9.
Therefore, the mapped value of 991 is 669.
338 maps to 007, or 7 after removing the leading zeros.
38 maps to 07, which is also 7 after removing leading zeros.
Since 338 and 38 share the same mapped value, they should remain in the same relative order, so 338 comes before 38.
Thus, the sorted array is [338,38,991].
Example 2:

Input: mapping = [0,1,2,3,4,5,6,7,8,9], nums = [789,456,123]
Output: [123,456,789]
Explanation: 789 maps to 789, 456 maps to 456, and 123 maps to 123. Thus, the sorted array is [123,456,789].
 

Constraints:

mapping.length == 10
0 <= mapping[i] <= 9
All the values of mapping[i] are unique.
1 <= nums.length <= 3 * 104
0 <= nums[i] < 109


ans:


import java.util.*;

public class Solution {

    // Function to map the value of a number according to the given mapping
    private int mappedValue(int num, int[] mapping) {
        StringBuilder mappedNum = new StringBuilder();
        String numStr = String.valueOf(num);
        for (char digit : numStr.toCharArray()) {
            mappedNum.append(mapping[digit - '0']);
        }
        return Integer.parseInt(mappedNum.toString());
    }

    public int[] sortJumbled(int[] mapping, int[] nums) {
        // Create a list of arrays where each array contains the mapped value, original index, and original value
        List<int[]> mappedNums = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            mappedNums.add(new int[]{mappedValue(nums[i], mapping), i, nums[i]});
        }

        // Sort the list based on mapped value, and use the original index to maintain stability
        Collections.sort(mappedNums, (a, b) -> {
            if (a[0] != b[0]) {
                return Integer.compare(a[0], b[0]);
            } else {
                return Integer.compare(a[1], b[1]);
            }
        });

        // Extract the sorted numbers based on the mapped values
        int[] result = new int[nums.length];
        for (int i = 0; i < mappedNums.size(); i++) {
            result[i] = mappedNums.get(i)[2];
        }

        return result;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int[] mapping = {8, 9, 4, 0, 2, 1, 3, 5, 7, 6};
        int[] nums = {991, 338, 38};
        int[] result = sol.sortJumbled(mapping, nums);
        System.out.println(Arrays.toString(result)); // Output: [338, 38, 991]
    }
}


******************************************************

1302. Deepest Leaves Sum
Solved
Medium
Topics
Companies
Hint
Given the root of a binary tree, return the sum of values of its deepest leaves.
 

Example 1:


Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]
Output: 15
Example 2:

Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 19
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
1 <= Node.val <= 100

ans::

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int deepestLeavesSum(TreeNode root) {
        if (root == null) return 0;
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        int sum = 0;
        
        while (!queue.isEmpty()) {
            int levelSize = queue.size();
            sum = 0; // reset sum at each level
            
            for (int i = 0; i < levelSize; i++) {
                TreeNode currentNode = queue.poll();
                sum += currentNode.val;
                
                if (currentNode.left != null) {
                    queue.add(currentNode.left);
                }
                if (currentNode.right != null) {
                    queue.add(currentNode.right);
                }
            }
        }
        
        return sum;
    }
}

**********************************************************

20. Valid Parentheses
Solved
Easy
Topics
Companies
Hint
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

ans::

class Solution {
    public boolean isValid(String s) {

       // Stack to keep track of opening brackets
        Stack<Character> stack = new Stack<>();

        // Iterate over the string characters
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);

            // If the character is an opening bracket, push it onto the stack
            if (c == '(' || c == '{' || c == '[') {
                stack.push(c);
            } else {
                // If the stack is empty or the top doesn't match the corresponding opening bracket, return false
                if (stack.isEmpty()) {
                    return false;
                }
                char top = stack.pop();
                if ((c == ')' && top != '(') ||
                    (c == '}' && top != '{') ||
                    (c == ']' && top != '[')) {
                    return false;
                }
            }
        }

        // Check if any unmatched opening brackets are left in the stack
        return stack.isEmpty();
    }
}

*******************************************************************

Remove Duplicates from Sorted Array
Attempted
Easy
Topics
Companies
Hint
Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.

Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:

Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.
Return k.
Custom Judge:

The judge will test your solution with the following code:

int[] nums = [...]; // Input array
int[] expectedNums = [...]; // The expected answer with correct length

int k = removeDuplicates(nums); // Calls your implementation

assert k == expectedNums.length;
for (int i = 0; i < k; i++) {
    assert nums[i] == expectedNums[i];
}
If all assertions pass, then your solution will be accepted.

 

Example 1:

Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
Example 2:

Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
 

Constraints:

1 <= nums.length <= 3 * 104
-100 <= nums[i] <= 100
nums is sorted in non-decreasing order.

ans:;

class Solution {
    public int removeDuplicates(int[] nums) {
       if (nums.length == 0) return 0;

        int k = 0; // Initialize the pointer for the unique elements

        // Iterate through the array with the pointer i
        for (int i = 1; i < nums.length; i++) {
            // When we encounter a new unique element
            if (nums[i] != nums[k]) {
                k++; // Move the unique pointer forward
                nums[k] = nums[i]; // Update the position with the unique element
            }
        }

        return k + 1;  
    }
}

*********************************************

2. Add Two Numbers
Medium
Topics
Companies
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.

ans::

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {

        String s1="";
        String s1r="";
        while(l1!=null){
            s1+=String.valueOf(l1.val);
            l1=l1.next;
        }
        System.out.println(s1);

         for(int a=s1.length()-1;a>=0;a--){
           // System.out.println("insie for");
            s1r+=s1.charAt(a);
        }
        System.out.println(s1r);
        String s2="";
        String s2r="";
       
        while(l2!=null){
            s2+=String.valueOf(l2.val);
            l2=l2.next;
        }
        System.out.println(s2);
         for(int a=s2.length()-1;a>=0;a--){
           // System.out.println("insie for");
            s2r+=s2.charAt(a);
        }
        System.out.println(s2r);

        String noTo=String.valueOf(Integer.parseInt(s1r)+Integer.parseInt(s2r));
        System.out.println(noTo);
        int lengthh=noTo.length()-1;
        ListNode ans= new ListNode(noTo.charAt(lengthh)-'0');
        ListNode n=ans;
        for(int a=noTo.length()-2;a>=0;a--){

            n.next=new ListNode(noTo.charAt(a)-'0');
            n=n.next;
            
        }


       return ans; 
    }
}

alt ans::/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // Dummy node to act as the head of the result linked list
        ListNode dummyHead = new ListNode(0);
        ListNode current = dummyHead;
        int carry = 0;
        
        // Loop through both lists
        while (l1 != null || l2 != null || carry != 0) {
            int sum = carry;
            if (l1 != null) {
                sum += l1.val;
                l1 = l1.next;
            }
            if (l2 != null) {
                sum += l2.val;
                l2 = l2.next;
            }
            
            carry = sum / 10;
            int digit = sum % 10;
            
            current.next = new ListNode(digit);
            current = current.next;
        }
        
        return dummyHead.next; // The head of the resultant linked list
    
    }
}

***********************************************
