3016. Minimum Number of Pushes to Type Word II
Solved
Medium
Topics
Companies
Hint
You are given a string word containing lowercase English letters.

Telephone keypads have keys mapped with distinct collections of lowercase English letters, which can be used to form words by pushing them. For example, the key 2 is mapped with ["a","b","c"], we need to push the key one time to type "a", two times to type "b", and three times to type "c" .

It is allowed to remap the keys numbered 2 to 9 to distinct collections of letters. The keys can be remapped to any amount of letters, but each letter must be mapped to exactly one key. You need to find the minimum number of times the keys will be pushed to type the string word.

Return the minimum number of pushes needed to type word after remapping the keys.

An example mapping of letters to keys on a telephone keypad is given below. Note that 1, *, #, and 0 do not map to any letters.


 

Example 1:


Input: word = "abcde"
Output: 5
Explanation: The remapped keypad given in the image provides the minimum cost.
"a" -> one push on key 2
"b" -> one push on key 3
"c" -> one push on key 4
"d" -> one push on key 5
"e" -> one push on key 6
Total cost is 1 + 1 + 1 + 1 + 1 = 5.
It can be shown that no other mapping can provide a lower cost.
Example 2:


Input: word = "xyzxyzxyzxyz"
Output: 12
Explanation: The remapped keypad given in the image provides the minimum cost.
"x" -> one push on key 2
"y" -> one push on key 3
"z" -> one push on key 4
Total cost is 1 * 4 + 1 * 4 + 1 * 4 = 12
It can be shown that no other mapping can provide a lower cost.
Note that the key 9 is not mapped to any letter: it is not necessary to map letters to every key, but to map all the letters.
Example 3:


Input: word = "aabbccddeeffgghhiiiiii"
Output: 24
Explanation: The remapped keypad given in the image provides the minimum cost.
"a" -> one push on key 2
"b" -> one push on key 3
"c" -> one push on key 4
"d" -> one push on key 5
"e" -> one push on key 6
"f" -> one push on key 7
"g" -> one push on key 8
"h" -> two pushes on key 9
"i" -> one push on key 9
Total cost is 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 2 * 2 + 6 * 1 = 24.
It can be shown that no other mapping can provide a lower cost.
 

Constraints:

1 <= word.length <= 105
word consists of lowercase English letters.


ans::

class Solution {
    public int minimumPushes(String word) {

        int pushes=0;

        Map<Character,Integer>map=new HashMap<>();
        Set<Character>set=new HashSet<>();

        for(char a:word.toCharArray()){
            map.put(a,map.getOrDefault(a,0)+1);
            set.add(a);
        }
        System.out.println(map);
        System.out.println(set);
        int [] arr=new int[set.size()];
        int point=0;
        for(char a:set){
            arr[point]=map.get(a);
            point++;
        }
        if(set.size()<=8){
            for(char a:set){
                pushes+=map.get(a)*1;
            }
            }else{

                Arrays.sort(arr);
                System.out.println(arr.length);
                int push=1;
                int p=0;
            for(int b=arr.length-1;b>=0;b--){
                
                System.out.println("indexx =" +b);
                pushes+=(arr[b])*push;
                System.out.println("pushes = "+pushes);
                p++;
                System.out.println("p= "+p);
                if(p%8==0){
                    System.out.println("inside if");
                    push++;
                }
             
             System.out.println("push = "+push);
            }
         //   System.out.println(push);
           
            }
            
        
        return pushes;
    }
}

************************************************************************

3079. Find the Sum of Encrypted Integers
Solved
Easy
Topics
Companies
Hint
You are given an integer array nums containing positive integers. We define a function encrypt such that encrypt(x) replaces every digit in x with the largest digit in x. For example, encrypt(523) = 555 and encrypt(213) = 333.

Return the sum of encrypted elements.

 

Example 1:

Input: nums = [1,2,3]

Output: 6

Explanation: The encrypted elements are [1,2,3]. The sum of encrypted elements is 1 + 2 + 3 == 6.

Example 2:

Input: nums = [10,21,31]

Output: 66

Explanation: The encrypted elements are [11,22,33]. The sum of encrypted elements is 11 + 22 + 33 == 66.

 

Constraints:

1 <= nums.length <= 50
1 <= nums[i] <= 1000

ans::

class Solution {
    public int sumOfEncryptedInt(int[] nums) {
        int sum=0;

        for(int a:nums){
            int no=a;
            int no1=a;
            int maxx=0;
            int noTo=0;
            while(no>0){
                int temp=no%10;
                maxx=Math.max(maxx,temp);
                no=no/10;
            }
            System.out.println("max="+maxx);
            while(no1>0){
            System.out.println("inside 2 while");
            noTo=noTo*10+maxx;
            System.out.println("noTo="+noTo);
            no1= no1/10;
            System.out.println("no1="+no1);
            }
            System.out.println(noTo);
            sum+=noTo;

        }
      return sum;  
    }
}

******************************************************************

2788. Split Strings by Separator
Solved
Easy
Topics
Companies
Hint
Given an array of strings words and a character separator, split each string in words by separator.

Return an array of strings containing the new strings formed after the splits, excluding empty strings.

Notes

separator is used to determine where the split should occur, but it is not included as part of the resulting strings.
A split may result in more than two strings.
The resulting strings must maintain the same order as they were initially given.
 

Example 1:

Input: words = ["one.two.three","four.five","six"], separator = "."
Output: ["one","two","three","four","five","six"]
Explanation: In this example we split as follows:

"one.two.three" splits into "one", "two", "three"
"four.five" splits into "four", "five"
"six" splits into "six" 

Hence, the resulting array is ["one","two","three","four","five","six"].
Example 2:

Input: words = ["$easy$","$problem$"], separator = "$"
Output: ["easy","problem"]
Explanation: In this example we split as follows: 

"$easy$" splits into "easy" (excluding empty strings)
"$problem$" splits into "problem" (excluding empty strings)

Hence, the resulting array is ["easy","problem"].
Example 3:

Input: words = ["|||"], separator = "|"
Output: []
Explanation: In this example the resulting split of "|||" will contain only empty strings, so we return an empty array []. 
 

Constraints:

1 <= words.length <= 100
1 <= words[i].length <= 20
characters in words[i] are either lowercase English letters or characters from the string ".,|$#@" (excluding the quotes)
separator is a character from the string ".,|$#@" (excluding the quotes)

ans::

import java.util.*;

class Solution {
    public List<String> splitWordsBySeparator(List<String> words, char separator) {

        List<String>list=new ArrayList<>();
        String c=String.valueOf(separator);
        for(String a:words){
            String [] arr=a.split(java.util.regex.Pattern.quote(c));
            System.out.println(arr.length);
            for(int b=0;b<arr.length;b++){
                System.out.println("inside");
                System.out.println(arr[b]);

                 if (!arr[b].isEmpty()) {
                     list.add(arr[b]);
                }
               
            }
        }
       return list; 
    }
}

**********************************************************************8