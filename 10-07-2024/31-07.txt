2125. Number of Laser Beams in a Bank
Attempted
Medium
Topics
Companies
Hint
Anti-theft security devices are activated inside a bank. You are given a 0-indexed binary string array bank representing the floor plan of the bank, which is an m x n 2D matrix. bank[i] represents the ith row, consisting of '0's and '1's. '0' means the cell is empty, while'1' means the cell has a security device.

There is one laser beam between any two security devices if both conditions are met:

The two devices are located on two different rows: r1 and r2, where r1 < r2.
For each row i where r1 < i < r2, there are no security devices in the ith row.
Laser beams are independent, i.e., one beam does not interfere nor join with another.

Return the total number of laser beams in the bank.

 

Example 1:


Input: bank = ["011001","000000","010100","001000"]
Output: 8
Explanation: Between each of the following device pairs, there is one beam. In total, there are 8 beams:
 * bank[0][1] -- bank[2][1]
 * bank[0][1] -- bank[2][3]
 * bank[0][2] -- bank[2][1]
 * bank[0][2] -- bank[2][3]
 * bank[0][5] -- bank[2][1]
 * bank[0][5] -- bank[2][3]
 * bank[2][1] -- bank[3][2]
 * bank[2][3] -- bank[3][2]
Note that there is no beam between any device on the 0th row with any on the 3rd row.
This is because the 2nd row contains security devices, which breaks the second condition.
Example 2:


Input: bank = ["000","111","000"]
Output: 0
Explanation: There does not exist two devices located on two different rows.
 

Constraints:

m == bank.length
n == bank[i].length
1 <= m, n <= 500
bank[i][j] is either '0' or '1'.


myans::

class Solution {
    public int numberOfBeams(String[] bank) {

        int ans=0;

        for(int a=0;a<bank.length-1;a++){
            String h =bank[a];
            char[] arr=h.toCharArray();
            Map<Character,Integer>map= new HashMap<>();
            for(char b:arr){

                map.put(b,map.getOrDefault(b,0)+1);
            
            }
            System.out.println(map);
            int pre=0;
            for(char b:arr){
                if(b=='1'){
                      pre=map.get(b);
                }
            }
               
                int next=0;
            for(int c=a+1;c<bank.length;c++){
               
                if(bank[c].contains("1")==true){
                     Map<Character,Integer>map2=new HashMap<>();
                    for(char b:bank[c].toCharArray()){
                        System.out.println(b);
                         map2.put(b,map2.getOrDefault(b,0)+1);
                         
                    }
                     System.out.println(map2);

                 for(char b:arr){
                if(b=='1'){
                      next=map2.get(b);
                    
                } 
                
                
              
            }
             break;
            
        }
       
    }
    System.out.println("pre ="+pre+"next="+next);
            ans+=(pre*next);
}
return ans; 
}}

***
class Solution {
    public int numberOfBeams(String[] bank) {


          int m = bank.length;
        int totalBeams = 0;
        int previousDevices = 0;

        for (String row : bank) {
            int currentDevices = countDevices(row);
            if (currentDevices > 0) {
                totalBeams += previousDevices * currentDevices;
                previousDevices = currentDevices;
            }
        }

        return totalBeams;
    }

    private int countDevices(String row) {
        int count = 0;
        for (char c : row.toCharArray()) {
            if (c == '1') {
                count++;
            }
        }
        return count;
    }
        
    }


*****************************************************************************************************


2545. Sort the Students by Their Kth Score
Solved
Medium
Topics
Companies
Hint
There is a class with m students and n exams. You are given a 0-indexed m x n integer matrix score, where each row represents one student and score[i][j] denotes the score the ith student got in the jth exam. The matrix score contains distinct integers only.

You are also given an integer k. Sort the students (i.e., the rows of the matrix) by their scores in the kth (0-indexed) exam from the highest to the lowest.

Return the matrix after sorting it.

 

Example 1:


Input: score = [[10,6,9,1],[7,5,11,2],[4,8,3,15]], k = 2
Output: [[7,5,11,2],[10,6,9,1],[4,8,3,15]]
Explanation: In the above diagram, S denotes the student, while E denotes the exam.
- The student with index 1 scored 11 in exam 2, which is the highest score, so they got first place.
- The student with index 0 scored 9 in exam 2, which is the second highest score, so they got second place.
- The student with index 2 scored 3 in exam 2, which is the lowest score, so they got third place.
Example 2:


Input: score = [[3,4],[5,6]], k = 0
Output: [[5,6],[3,4]]
Explanation: In the above diagram, S denotes the student, while E denotes the exam.
- The student with index 1 scored 5 in exam 0, which is the highest score, so they got first place.
- The student with index 0 scored 3 in exam 0, which is the lowest score, so they got second place.

ans:;
class Solution {
    public int[][] sortTheStudents(int[][] score, int k) {

        int [][] ans= new int[score.length][score[0].length];
        int [] arrTo= new int[score.length];
        
        for(int a=0;a<score.length;a++){
            for(int b=k;b<=k;b++){
                arrTo[a]=score[a][b];
            }
        }
        Arrays.sort(arrTo);

        for(int a:arrTo){
            System.out.print(" "+a);
        }
        int row=0;
        for(int a=arrTo.length-1;a>=0;a--){
           
            
             boolean flag=false;
            for(int [] b:score){
                for(int c:b){
                    if(c==arrTo[a]){
                        System.out.println(c);
                        flag=true;
                        break;
                        
                    }

                }
                if(flag==true){
                    System.out.println("flag true");
                    int column=0;
                    for(int c:b){
                        System.out.println(row);
                        System.out.print("adding"+c);
                        ans[row][column]=c;
                        column++;
                    }
                    break;
                }
                
            }

            row++;
        }
        
       return ans; 
    }
}

*********************************************************************************

