950. Reveal Cards In Increasing Order
Medium
Topics
Companies
You are given an integer array deck. There is a deck of cards where every card has a unique integer. The integer on the ith card is deck[i].

You can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.

You will do the following steps repeatedly until all cards are revealed:

Take the top card of the deck, reveal it, and take it out of the deck.
If there are still cards in the deck then put the next top card of the deck at the bottom of the deck.
If there are still unrevealed cards, go back to step 1. Otherwise, stop.
Return an ordering of the deck that would reveal the cards in increasing order.

Note that the first entry in the answer is considered to be the top of the deck.

 

Example 1:

Input: deck = [17,13,11,2,3,5,7]
Output: [2,13,3,11,5,17,7]
Explanation: 
We get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it.
After reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.
We reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].
We reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].
We reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].
We reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].
We reveal 11, and move 17 to the bottom.  The deck is now [13,17].
We reveal 13, and move 17 to the bottom.  The deck is now [17].
We reveal 17.
Since all the cards revealed are in increasing order, the answer is correct.
Example 2:

Input: deck = [1,1000]
Output: [1,1000]
 

Constraints:

1 <= deck.length <= 1000
1 <= deck[i] <= 106
All the values of deck are uniqu


ans::

class Solution {
    public int[] deckRevealedIncreasing(int[] deck) {

        Queue<Integer> queue=new LinkedList<>();
        int n=deck.length;
        Arrays.sort(deck);
        for(int a=0;a<n;a++){
            queue.add(a);
        }

        int [] ans=new int [n];

        for(int a:deck){
            ans[queue.poll()]=a;
            if(!queue.isEmpty()){
                queue.add(queue.poll());
            }
        }
       return ans; 
    }
}

***************************************************************************

1347. Minimum Number of Steps to Make Two Strings Anagram
Solved
Medium
Topics
Companies
Hint
You are given two strings of the same length s and t. In one step you can choose any character of t and replace it with another character.

Return the minimum number of steps to make t an anagram of s.

An Anagram of a string is a string that contains the same characters with a different (or the same) ordering.

 

Example 1:

Input: s = "bab", t = "aba"
Output: 1
Explanation: Replace the first 'a' in t with b, t = "bba" which is anagram of s.
Example 2:

Input: s = "leetcode", t = "practice"
Output: 5
Explanation: Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s.
Example 3:

Input: s = "anagram", t = "mangaar"
Output: 0
Explanation: "anagram" and "mangaar" are anagrams. 
 

Constraints:

1 <= s.length <= 5 * 104
s.length == t.length
s and t consist of lowercase English letters only.

ans::

class Solution {
    public int minSteps(String s, String t) {


        Map<Character,Integer>map1= new HashMap<>();

        Map<Character,Integer>map2=new HashMap<>();

        Set<Character>set= new HashSet<>();

        for(char a:s.toCharArray()){
            map1.put(a,map1.getOrDefault(a,0)+1);
            set.add(a);
        }

         for(char a:t.toCharArray()){
            map2.put(a,map2.getOrDefault(a,0)+1);
         }

        int sum=0;
         for(char a:set){
            if(map1.get(a)>map2.getOrDefault(a,0)){

            
            sum+=Math.abs(map1.get(a)-map2.getOrDefault(a,0));
         }}
      return sum;  
    }
}


********************************************************************************