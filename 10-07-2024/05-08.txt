2053. Kth Distinct String in an Array
Solved
Easy
Topics
Companies
Hint
A distinct string is a string that is present only once in an array.

Given an array of strings arr, and an integer k, return the kth distinct string present in arr. If there are fewer than k distinct strings, return an empty string "".

Note that the strings are considered in the order in which they appear in the array.

 

Example 1:

Input: arr = ["d","b","c","b","c","a"], k = 2
Output: "a"
Explanation:
The only distinct strings in arr are "d" and "a".
"d" appears 1st, so it is the 1st distinct string.
"a" appears 2nd, so it is the 2nd distinct string.
Since k == 2, "a" is returned. 
Example 2:

Input: arr = ["aaa","aa","a"], k = 1
Output: "aaa"
Explanation:
All strings in arr are distinct, so the 1st string "aaa" is returned.
Example 3:

Input: arr = ["a","b","a"], k = 3
Output: ""
Explanation:
The only distinct string is "b". Since there are fewer than 3 distinct strings, we return an empty string "".
 

Constraints:

1 <= k <= arr.length <= 1000
1 <= arr[i].length <= 5
arr[i] consists of lowercase English letters.


ans::

class Solution {
    public String kthDistinct(String[] arr, int k) {

        Map<String,Integer>map=new HashMap<>();
        
        List<String>list=new ArrayList<>();
        for(String a:arr){
            map.put(a,map.getOrDefault(a,0)+1);
            
        }

        for(String a:arr){
            if(map.get(a)==1 && list.contains(a)==false){
                list.add(a);
            }
        }
        System.out.println(list);
        if(list.size()>=k){
            return list.get(k-1);
        }else{
            return "";
        }
        
    }
}

****************************************************************************

2341. Maximum Number of Pairs in Array
Solved
Easy
Topics
Companies
Hint
You are given a 0-indexed integer array nums. In one operation, you may do the following:

Choose two integers in nums that are equal.
Remove both integers from nums, forming a pair.
The operation is done on nums as many times as possible.

Return a 0-indexed integer array answer of size 2 where answer[0] is the number of pairs that are formed and answer[1] is the number of leftover integers in nums after doing the operation as many times as possible.

 

Example 1:

Input: nums = [1,3,2,1,3,2,2]
Output: [3,1]
Explanation:
Form a pair with nums[0] and nums[3] and remove them from nums. Now, nums = [3,2,3,2,2].
Form a pair with nums[0] and nums[2] and remove them from nums. Now, nums = [2,2,2].
Form a pair with nums[0] and nums[1] and remove them from nums. Now, nums = [2].
No more pairs can be formed. A total of 3 pairs have been formed, and there is 1 number leftover in nums.
Example 2:

Input: nums = [1,1]
Output: [1,0]
Explanation: Form a pair with nums[0] and nums[1] and remove them from nums. Now, nums = [].
No more pairs can be formed. A total of 1 pair has been formed, and there are 0 numbers leftover in nums.
Example 3:

Input: nums = [0]
Output: [0,1]
Explanation: No pairs can be formed, and there is 1 number leftover in nums.
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 100

ans::

class Solution {
    public int[] numberOfPairs(int[] nums) {
        int [] ans=new int[2];
        int countR=0;
        int countA=0;
        Map<Integer,Integer>map=new HashMap<>();
        Set<Integer>set=new HashSet<>();

        for(int a:nums){
            map.put(a,map.getOrDefault(a,0)+1);
            set.add(a);
        }
        System.out.println(map);

        for(int a:set){
            if(map.get(a)%2==0){
                countR+=(map.get(a)/2);
            }else{
                countR+=((map.get(a)-1)/2);
                countA+=(map.get(a)%2);
            }
        }
        ans[0]=countR;
        ans[1]=countA;
      return ans;  
    }
}
**********************************************************