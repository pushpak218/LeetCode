791. Find Center of Star Graph
Solved
Easy
Topics
Companies
Hint
There is an undirected star graph consisting of n nodes labeled from 1 to n. A star graph is a graph where there is one center node and exactly n - 1 edges that connect the center node with every other node.

You are given a 2D integer array edges where each edges[i] = [ui, vi] indicates that there is an edge between the nodes ui and vi. Return the center of the given star graph.

 

Example 1:


Input: edges = [[1,2],[2,3],[4,2]]
Output: 2
Explanation: As shown in the figure above, node 2 is connected to every other node, so 2 is the center.
Example 2:

Input: edges = [[1,2],[5,1],[1,3],[1,4]]
Output: 1
 

Constraints:

3 <= n <= 105
edges.length == n - 1
edges[i].length == 2
1 <= ui, vi <= n
ui != vi
The given edges represent a valid star graph.

ans:

class Solution {
    public int findCenter(int[][] edges) {

        Set<Integer> set =new HashSet<>();
        int ans=0;
        for(int[] a:edges){

            
            for(int b=0;b<a.length;b++){
                System.out.println(a[b]);
                if(!set.add(a[b])){
                    ans= a[b];
                }
            }
        }
       return ans; 
    }
}

**************************************************************


Code
Testcase
Testcase
Test Result
1769. Minimum Number of Operations to Move All Balls to Each Box
Medium
Topics
Companies
Hint
You have n boxes. You are given a binary string boxes of length n, where boxes[i] is '0' if the ith box is empty, and '1' if it contains one ball.

In one operation, you can move one ball from a box to an adjacent box. Box i is adjacent to box j if abs(i - j) == 1. Note that after doing so, there may be more than one ball in some boxes.

Return an array answer of size n, where answer[i] is the minimum number of operations needed to move all the balls to the ith box.

Each answer[i] is calculated considering the initial state of the boxes.

 

Example 1:

Input: boxes = "110"
Output: [1,1,3]
Explanation: The answer for each box is as follows:
1) First box: you will have to move one ball from the second box to the first box in one operation.
2) Second box: you will have to move one ball from the first box to the second box in one operation.
3) Third box: you will have to move one ball from the first box to the third box in two operations, and move one ball from the second box to the third box in one operation.
Example 2:

Input: boxes = "001011"
Output: [11,8,5,4,3,4]
 

Constraints:

n == boxes.length
1 <= n <= 2000
boxes[i] is either '0' or '1'.

ans::
class Solution {
    public int[] minOperations(String boxes) {

        int count=0;

        int[] ans= new int[boxes.length()];

        char [] charr=boxes.toCharArray();

        for(int a=0;a<charr.length;a++){
            char no=charr[a];
            int anss=0;
            for(int b=0;b<charr.length;b++){
                if(b!=a && charr[b]=='1'){
                    int diff=Math.abs(a-b);
                    anss=anss+diff;
                }
            }
            ans[a]=anss;
        }

      return ans;  
    }
}

****************************************************************