2951. Find the Peaks
Solved
Easy
Topics
Companies
Hint
You are given a 0-indexed array mountain. Your task is to find all the peaks in the mountain array.

Return an array that consists of indices of peaks in the given array in any order.

Notes:

A peak is defined as an element that is strictly greater than its neighboring elements.
The first and last elements of the array are not a peak.
 

Example 1:

Input: mountain = [2,4,4]
Output: []
Explanation: mountain[0] and mountain[2] can not be a peak because they are first and last elements of the array.
mountain[1] also can not be a peak because it is not strictly greater than mountain[2].
So the answer is [].
Example 2:

Input: mountain = [1,4,3,8,5]
Output: [1,3]
Explanation: mountain[0] and mountain[4] can not be a peak because they are first and last elements of the array.
mountain[2] also can not be a peak because it is not strictly greater than mountain[3] and mountain[1].
But mountain [1] and mountain[3] are strictly greater than their neighboring elements.
So the answer is [1,3].
 

Constraints:

3 <= mountain.length <= 100
1 <= mountain[i] <= 100

ans::

class Solution {
    public List<Integer> findPeaks(int[] mountain) {

        List<Integer> ans = new ArrayList<>();

        for(int a=1;a<=mountain.length-2;a++){
            if(mountain[a]>mountain[a-1] && mountain[a]>mountain[a+1]){
                ans.add(a);
            }
        }
       return ans; 
    }
} 

*******************************************************************

1450. Number of Students Doing Homework at a Given Time
Solved
Easy
Topics
Companies
Hint
Given two integer arrays startTime and endTime and given an integer queryTime.

The ith student started doing their homework at the time startTime[i] and finished it at time endTime[i].

Return the number of students doing their homework at time queryTime. More formally, return the number of students where queryTime lays in the interval [startTime[i], endTime[i]] inclusive.

 

Example 1:

Input: startTime = [1,2,3], endTime = [3,2,7], queryTime = 4
Output: 1
Explanation: We have 3 students where:
The first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4.
The second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4.
The third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4.
Example 2:

Input: startTime = [4], endTime = [4], queryTime = 4
Output: 1
Explanation: The only student was doing their homework at the queryTime.
 

Constraints:

startTime.length == endTime.length
1 <= startTime.length <= 100
1 <= startTime[i] <= endTime[i] <= 1000
1 <= queryTime <= 1000

ans::

class Solution {
    public int busyStudent(int[] startTime, int[] endTime, int queryTime) {

        int count=0;

        for(int a=0;a<startTime.length;a++){
            if(queryTime>=startTime[a] && queryTime<=endTime[a]){
                count++;
            }
        }
      return count;  
    }
}

*****************************************************

3151. Special Array I
Easy
Topics
Companies
Hint
An array is considered special if every pair of its adjacent elements contains two numbers with different parity.

You are given an array of integers nums. Return true if nums is a special array, otherwise, return false.

 

Example 1:

Input: nums = [1]

Output: true

Explanation:

There is only one element. So the answer is true.

Example 2:

Input: nums = [2,1,4]

Output: true

Explanation:

There is only two pairs: (2,1) and (1,4), and both of them contain numbers with different parity. So the answer is true.

Example 3:

Input: nums = [4,3,1,6]

Output: false

Explanation:

nums[1] and nums[2] are both odd. So the answer is false.

 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100

ans::

class Solution {
    public boolean isArraySpecial(int[] nums) {

        boolean flag=true;

        int n=nums.length;

        if(n==1){
            return flag;
        } else{
            for(int a=0;a<nums.length-1;a++){
                if(nums[a]%2==0 && nums[a+1]%2!=0 || nums[a]%2!=0 && nums[a+1]%2==0){
                    flag=true;
                }else{
                    flag=false;
                    break;
                }
            }
        }
      return flag;  
    }
}
**********************************************

2643. Row With Maximum Ones
Easy
Topics
Companies
Hint
Given a m x n binary matrix mat, find the 0-indexed position of the row that contains the maximum count of ones, and the number of ones in that row.

In case there are multiple rows that have the maximum count of ones, the row with the smallest row number should be selected.

Return an array containing the index of the row, and the number of ones in it.

 

Example 1:

Input: mat = [[0,1],[1,0]]
Output: [0,1]
Explanation: Both rows have the same number of 1's. So we return the index of the smaller row, 0, and the maximum count of ones (1). So, the answer is [0,1]. 
Example 2:

Input: mat = [[0,0,0],[0,1,1]]
Output: [1,2]
Explanation: The row indexed 1 has the maximum count of ones (2). So we return its index, 1, and the count. So, the answer is [1,2].
Example 3:

Input: mat = [[0,0],[1,1],[0,0]]
Output: [1,2]
Explanation: The row indexed 1 has the maximum count of ones (2). So the answer is [1,2].
 

Constraints:

m == mat.length 
n == mat[i].length 
1 <= m, n <= 100 
mat[i][j] is either 0 or 1.

ans::

class Solution {
    public int[] rowAndMaximumOnes(int[][] mat) {

        int count=0;
        int [] ans=new int[2];
        for(int a=0;a<mat.length;a++){
            int count1=0;
            for(int b=0;b<mat[0].length;b++){
                
                if(mat[a][b]==1){
                    count1++;
                }

                if(count1>count){
                    count=count1;
                    ans[0]=a;
                    ans[1]=count;
                }
            }
        }
        return ans;
    }
}

**************************************************************************

2032. Two Out of Three
Attempted
Easy
Topics
Companies
Hint
Given three integer arrays nums1, nums2, and nums3, return a distinct array containing all the values that are present in at least two out of the three arrays. You may return the values in any order.
 

Example 1:

Input: nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]
Output: [3,2]
Explanation: The values that are present in at least two arrays are:
- 3, in all three arrays.
- 2, in nums1 and nums2.
Example 2:

Input: nums1 = [3,1], nums2 = [2,3], nums3 = [1,2]
Output: [2,3,1]
Explanation: The values that are present in at least two arrays are:
- 2, in nums2 and nums3.
- 3, in nums1 and nums2.
- 1, in nums1 and nums3.
Example 3:

Input: nums1 = [1,2,2], nums2 = [4,3,3], nums3 = [5]
Output: []
Explanation: No value is present in at least two arrays.
 

Constraints:

1 <= nums1.length, nums2.length, nums3.length <= 100
1 <= nums1[i], nums2[j], nums3[k] <= 100

ans::

class Solution {
    public List<Integer> twoOutOfThree(int[] nums1, int[] nums2, int[] nums3) {
         Map<Integer, Integer> countMap = new HashMap<>();
        
        // Helper method to add elements of an array to the map
        // but only once per array to avoid duplicate counts from the same array
        addToMap(nums1, countMap);
        addToMap(nums2, countMap);
        addToMap(nums3, countMap);
        
        List<Integer> result = new ArrayList<>();
        for (Map.Entry<Integer, Integer> entry : countMap.entrySet()) {
            if (entry.getValue() >= 2) {
                result.add(entry.getKey());
            }
        }
        
        return result;
    }
    
    private void addToMap(int[] nums, Map<Integer, Integer> countMap) {
        Set<Integer> uniqueElements = new HashSet<>();
        for (int num : nums) {
            uniqueElements.add(num);
        }
        for (int num : uniqueElements) {
            countMap.put(num, countMap.getOrDefault(num, 0) + 1);
    }
}}


********************************************************************

