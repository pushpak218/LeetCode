2161. Partition Array According to Given Pivot
Solved
Medium
Topics
Companies
Hint
You are given a 0-indexed integer array nums and an integer pivot. Rearrange nums such that the following conditions are satisfied:

Every element less than pivot appears before every element greater than pivot.
Every element equal to pivot appears in between the elements less than and greater than pivot.
The relative order of the elements less than pivot and the elements greater than pivot is maintained.
More formally, consider every pi, pj where pi is the new position of the ith element and pj is the new position of the jth element. For elements less than pivot, if i < j and nums[i] < pivot and nums[j] < pivot, then pi < pj. Similarly for elements greater than pivot, if i < j and nums[i] > pivot and nums[j] > pivot, then pi < pj.
Return nums after the rearrangement.

 

Example 1:

Input: nums = [9,12,5,10,14,3,10], pivot = 10
Output: [9,5,3,10,10,12,14]
Explanation: 
The elements 9, 5, and 3 are less than the pivot so they are on the left side of the array.
The elements 12 and 14 are greater than the pivot so they are on the right side of the array.
The relative ordering of the elements less than and greater than pivot is also maintained. [9, 5, 3] and [12, 14] are the respective orderings.
Example 2:

Input: nums = [-3,4,3,2], pivot = 2
Output: [-3,2,4,3]
Explanation: 
The element -3 is less than the pivot so it is on the left side of the array.
The elements 4 and 3 are greater than the pivot so they are on the right side of the array.
The relative ordering of the elements less than and greater than pivot is also maintained. [-3] and [4, 3] are the respective orderings.
 

ans::

class Solution {
    public int[] pivotArray(int[] nums, int pivot) {
        List<Integer> list1  = new ArrayList<>();
        List<Integer>list2= new ArrayList<>();
        List<Integer>list3=new ArrayList<>();
        for(int a=0;a<nums.length;a++){
            if(nums[a]<pivot){
                list1.add(nums[a]);
            }
             if(nums[a]>pivot){
                list2.add(nums[a]);
            }if(nums[a]==pivot){
                list3.add(nums[a]);
            }
        }

        int [] ans=new int[nums.length];
        int point=0;
        for(int a:list1){
            ans[point]=a;
            point++;
        }

        for(int a:list3){
            ans[point]=a;
            point++;
        }

        for(int a:list2){
            ans[point]=a;
            point++;
        }
        return ans;
    }
}

*********************************************************

1561. Maximum Number of Coins You Can Get
Solved
Medium
Topics
Companies
Hint
There are 3n piles of coins of varying size, you and your friends will take piles of coins as follows:

In each step, you will choose any 3 piles of coins (not necessarily consecutive).
Of your choice, Alice will pick the pile with the maximum number of coins.
You will pick the next pile with the maximum number of coins.
Your friend Bob will pick the last pile.
Repeat until there are no more piles of coins.
Given an array of integers piles where piles[i] is the number of coins in the ith pile.

Return the maximum number of coins that you can have.

 

Example 1:

Input: piles = [2,4,1,2,7,8]
Output: 9
Explanation: Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with 7 coins and Bob the last one.
Choose the triplet (1, 2, 4), Alice Pick the pile with 4 coins, you the pile with 2 coins and Bob the last one.
The maximum number of coins which you can have are: 7 + 2 = 9.
On the other hand if we choose this arrangement (1, 2, 8), (2, 4, 7) you only get 2 + 4 = 6 coins which is not optimal.
Example 2:

Input: piles = [2,4,5]
Output: 4
Example 3:

Input: piles = [9,8,7,6,5,1,2,3,4]
Output: 18
 

Constraints:

3 <= piles.length <= 105
piles.length % 3 == 0
1 <= piles[i] <= 104

ans::

class Solution {
    public int maxCoins(int[] piles) {

        int count=0;

        Arrays.sort(piles);

        int point=piles.length-2;

        int n=piles.length/3;


        while(n>0){
            count+=piles[point];
            point=point-2;
            n--;
        }

       
        return count;
    }
}

*****************************************