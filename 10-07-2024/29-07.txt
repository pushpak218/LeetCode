1282. Group the People Given the Group Size They Belong To
Medium
Topics
Companies
Hint
There are n people that are split into some unknown number of groups. Each person is labeled with a unique ID from 0 to n - 1.

You are given an integer array groupSizes, where groupSizes[i] is the size of the group that person i is in. For example, if groupSizes[1] = 3, then person 1 must be in a group of size 3.

Return a list of groups such that each person i is in a group of size groupSizes[i].

Each person should appear in exactly one group, and every person must be in a group. If there are multiple answers, return any of them. It is guaranteed that there will be at least one valid solution for the given input.

 

Example 1:

Input: groupSizes = [3,3,3,3,3,1,3]
Output: [[5],[0,1,2],[3,4,6]]
Explanation: 
The first group is [5]. The size is 1, and groupSizes[5] = 1.
The second group is [0,1,2]. The size is 3, and groupSizes[0] = groupSizes[1] = groupSizes[2] = 3.
The third group is [3,4,6]. The size is 3, and groupSizes[3] = groupSizes[4] = groupSizes[6] = 3.
Other possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]].
Example 2:

Input: groupSizes = [2,1,3,3,3,2]
Output: [[1],[0,5],[2,3,4]]
 
ans:
class Solution {
    public List<List<Integer>> groupThePeople(int[] groupSizes) {

        Map<Integer,List<Integer>>map = new HashMap<>();
        List<List<Integer>> ans=new ArrayList<>();
        for(int a=0;a<groupSizes.length;a++){

            int size=groupSizes[a];

            if(!map.containsKey(size)){
                map.put(size,new ArrayList<>());
            }

            map.get(size).add(a);

            if(map.get(size).size()==size){
                ans.add(new ArrayList<>(map.get(size)));
                map.get(size).clear();
            }
        }
      return ans;  
    }
}

********************************************************

1637. Widest Vertical Area Between Two Points Containing No Points
Easy
Topics
Companies
Hint
Given n points on a 2D plane where points[i] = [xi, yi], Return the widest vertical area between two points such that no points are inside the area.

A vertical area is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The widest vertical area is the one with the maximum width.

Note that points on the edge of a vertical area are not considered included in the area.

 

Example 1:

â€‹
Input: points = [[8,7],[9,9],[7,4],[9,7]]
Output: 1
Explanation: Both the red and the blue area are optimal.
Example 2:

Input: points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]
Output: 3
 

Constraints:

n == points.length
2 <= n <= 105
points[i].length == 2
0 <= xi, yi <= 109

ans::

class Solution {
    public int maxWidthOfVerticalArea(int[][] points) {

        int ans=0;
        int [] arr=new int[points.length];
        for(int a=0;a<points.length;a++){
            arr[a]=points[a][0];
        }

        Arrays.sort(arr);

        for(int a=0;a<arr.length-1;a++){
            ans= Math.max(ans,arr[a+1]-arr[a]);
        }
        return ans;
    }
}
*****************************************************************