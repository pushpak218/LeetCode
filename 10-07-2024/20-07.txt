961. N-Repeated Element in Size 2N Array
Easy
Topics
Companies
You are given an integer array nums with the following properties:

nums.length == 2 * n.
nums contains n + 1 unique elements.
Exactly one element of nums is repeated n times.
Return the element that is repeated n times.

 

Example 1:

Input: nums = [1,2,3,3]
Output: 3
Example 2:

Input: nums = [2,1,2,5,3,2]
Output: 2
Example 3:

Input: nums = [5,1,5,2,5,3,5,4]
Output: 5
 

Constraints:

2 <= n <= 5000
nums.length == 2 * n
0 <= nums[i] <= 104
nums contains n + 1 unique elements and one of them is repeated exactly n times.

ans::

class Solution {
    public int repeatedNTimes(int[] nums) {

       
        int countTo=nums.length/2;
        int ans=0;
        for(int a:nums){
             int count=0;
            System.out.println("a = "+a);
            for(int b=0;b<nums.length;b++){
                System.out.println("b = "+nums[b]);
                if(a==nums[b]){
                    System.out.println("inside");
                    count++;
                    System.out.println(count);
                }
                if(count==countTo){
                    ans=a;
                }
            }
        }
       return ans; 
    }
}
*******************************************************

The total sum is 5 + 10 + 15 = 30.
Example 2:

Input: ops = ["5","-2","4","C","D","9","+","+"]
Output: 27
Explanation:
"5" - Add 5 to the record, record is now [5].
"-2" - Add -2 to the record, record is now [5, -2].
"4" - Add 4 to the record, record is now [5, -2, 4].
"C" - Invalidate and remove the previous score, record is now [5, -2].
"D" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].
"9" - Add 9 to the record, record is now [5, -2, -4, 9].
"+" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].
"+" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].
The total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.
Example 3:

Input: ops = ["1","C"]
Output: 0
Explanation:
"1" - Add 1 to the record, record is now [1].
"C" - Invalidate and remove the previous score, record is now [].
Since the record is empty, the total sum is 0.
 

Constraints:

1 <= operations.length <= 1000
operations[i] is "C", "D", "+", or a string representing an integer in the range [-3 * 104, 3 * 104].
For operation "+", there will always be at least two previous scores on the record.
For operations "C" and "D", there will always be at least one previous score on the record.

ans::
class Solution {
    public int calPoints(String[] operations) {

         List<Integer> record = new ArrayList<>();

        for (String op : operations) {
            switch (op) {
                case "+":
                    int size = record.size();
                    record.add(record.get(size - 1) + record.get(size - 2));
                    break;
                case "D":
                    record.add(2 * record.get(record.size() - 1));
                    break;
                case "C":
                    record.remove(record.size() - 1);
                    break;
                default:
                    record.add(Integer.valueOf(op));
                    break;
            }
        }

        int sum = 0;
        for (int score : record) {
            sum += score;
        }

        return sum;
        
    }
}

****************************************************************************

2678. Number of Senior Citizens
Easy
Topics
Companies
Hint
You are given a 0-indexed array of strings details. Each element of details provides information about a given passenger compressed into a string of length 15. The system is such that:

The first ten characters consist of the phone number of passengers.
The next character denotes the gender of the person.
The following two characters are used to indicate the age of the person.
The last two characters determine the seat allotted to that person.
Return the number of passengers who are strictly more than 60 years old.

 

Example 1:

Input: details = ["7868190130M7522","5303914400F9211","9273338290F4010"]
Output: 2
Explanation: The passengers at indices 0, 1, and 2 have ages 75, 92, and 40. Thus, there are 2 people who are over 60 years old.
Example 2:

Input: details = ["1313579440F2036","2921522980M5644"]
Output: 0
Explanation: None of the passengers are older than 60.
 

Constraints:

1 <= details.length <= 100
details[i].length == 15
details[i] consists of digits from '0' to '9'.
details[i][10] is either 'M' or 'F' or 'O'.
The phone numbers and seat numbers of the passengers are distinct.

ans:
class Solution {
    public int countSeniors(String[] details) {

        int count=0;

        for(String a:details){
            String to = a.substring(11,13);
            int age = Integer.parseInt(to);
            if(age>60){
                count++;
            }
        }
        return count;
    }
}

********************************************************************
2733. Neither Minimum nor Maximum
Easy
Topics
Companies
Hint
Given an integer array nums containing distinct positive integers, find and return any number from the array that is neither the minimum nor the maximum value in the array, or -1 if there is no such number.

Return the selected integer.

 

Example 1:

Input: nums = [3,2,1,4]
Output: 2
Explanation: In this example, the minimum value is 1 and the maximum value is 4. Therefore, either 2 or 3 can be valid answers.
Example 2:

Input: nums = [1,2]
Output: -1
Explanation: Since there is no number in nums that is neither the maximum nor the minimum, we cannot select a number that satisfies the given condition. Therefore, there is no answer.
Example 3:

Input: nums = [2,1,3]
Output: 2
Explanation: Since 2 is neither the maximum nor the minimum value in nums, it is the only valid answer. 
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100
All values in nums are distinct

ans::

class Solution {
    public int findNonMinOrMax(int[] nums) {

        Arrays.sort(nums);

        if(nums.length>2){
            return nums[1];
        }else{
            return -1;
        }
        
    }
}

************************************************************************************

206. Reverse Linked List
Easy
Topics
Companies
Given the head of a singly linked list, reverse the list, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]
Example 2:


Input: head = [1,2]
Output: [2,1]
Example 3:

Input: head = []
Output: []
 

Constraints:

The number of nodes in the list is the range [0, 5000].
-5000 <= Node.val <= 5000
ans::

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {

        ListNode previous=null;
        ListNode current=head;
        ListNode next=null;

        while(current!=null){
            next = current.next; // Save next
            current.next = previous; // Reverse current node's pointer
            previous = current; // Move pointers one position ahead
            current = next;
        }
        
        return previous;

        
        
    }
}

*******************************************************