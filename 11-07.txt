You are given a 0-indexed integer array batteryPercentages having length n, denoting the battery percentages of n 0-indexed devices.

Your task is to test each device i in order from 0 to n - 1, by performing the following test operations:

If batteryPercentages[i] is greater than 0:
Increment the count of tested devices.
Decrease the battery percentage of all devices with indices j in the range [i + 1, n - 1] by 1, ensuring their battery percentage never goes below 0, i.e, batteryPercentages[j] = max(0, batteryPercentages[j] - 1).
Move to the next device.
Otherwise, move to the next device without performing any test.
Return an integer denoting the number of devices that will be tested after performing the test operations in order.

 

Example 1:

Input: batteryPercentages = [1,1,2,1,3]
Output: 3
Explanation: Performing the test operations in order starting from device 0:
At device 0, batteryPercentages[0] > 0, so there is now 1 tested device, and batteryPercentages becomes [1,0,1,0,2].
At device 1, batteryPercentages[1] == 0, so we move to the next device without testing.
At device 2, batteryPercentages[2] > 0, so there are now 2 tested devices, and batteryPercentages becomes [1,0,1,0,1].
At device 3, batteryPercentages[3] == 0, so we move to the next device without testing.
At device 4, batteryPercentages[4] > 0, so there are now 3 tested devices, and batteryPercentages stays the same.
So, the answer is 3.
Example 2:

Input: batteryPercentages = [0,1,2]
Output: 2
Explanation: Performing the test operations in order starting from device 0:
At device 0, batteryPercentages[0] == 0, so we move to the next device without testing.
At device 1, batteryPercentages[1] > 0, so there is now 1 tested device, and batteryPercentages becomes [0,1,1].
At device 2, batteryPercentages[2] > 0, so there are now 2 tested devices, and batteryPercentages stays the same.
So, the answer is 2.
 

Constraints:

1 <= n == batteryPercentages.length <= 100 
0 <= batteryPercentages[i] <= 100



ans:

class Solution {
    public int countTestedDevices(int[] batteryPercentages) {

        int count=0;

        for(int a=0;a<batteryPercentages.length;a++){
            int b=batteryPercentages[a]-count;
            if(b>0){
                count++;
            }
        }
       return count; 
    }
}

******************************************************************************






Given an array of strings patterns and a string word, return the number of strings in patterns that exist as a substring in word.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: patterns = ["a","abc","bc","d"], word = "abc"
Output: 3
Explanation:
- "a" appears as a substring in "abc".
- "abc" appears as a substring in "abc".
- "bc" appears as a substring in "abc".
- "d" does not appear as a substring in "abc".
3 of the strings in patterns appear as a substring in word.
Example 2:

Input: patterns = ["a","b","c"], word = "aaaaabbbbb"
Output: 2
Explanation:
- "a" appears as a substring in "aaaaabbbbb".
- "b" appears as a substring in "aaaaabbbbb".
- "c" does not appear as a substring in "aaaaabbbbb".
2 of the strings in patterns appear as a substring in word.
Example 3:

Input: patterns = ["a","a","a"], word = "ab"
Output: 3
Explanation: Each of the patterns appears as a substring in word "ab".
 

Constraints:

1 <= patterns.length <= 100
1 <= patterns[i].length <= 100
1 <= word.length <= 100
patterns[i] and word consist of lowercase English letters.





ans:


class Solution {
    public int numOfStrings(String[] patterns, String word) {


        int count=0;

        for(int a=0;a<patterns.length;a++){
            String b=patterns[a];
            if(word.contains(b)){
                count++;
            }
        }
        return count;
        
    }
}




****************************************************************************************

You are given a string s that consists of lower case English letters and brackets.

Reverse the strings in each pair of matching parentheses, starting from the innermost one.

Your result should not contain any brackets.

 

Example 1:

Input: s = "(abcd)"
Output: "dcba"
Example 2:

Input: s = "(u(love)i)"
Output: "iloveu"
Explanation: The substring "love" is reversed first, then the whole string is reversed.
Example 3:

Input: s = "(ed(et(oc))el)"
Output: "leetcode"
Explanation: First, we reverse the substring "oc", then "etco", and finally, the whole string.
 

Constraints:

1 <= s.length <= 2000
s only contains lower case English characters and parentheses.
It is guaranteed that all parentheses are balanced.


ans:



class Solution {
    public String reverseParentheses(String s) {
        int start=0;
        int end=0;
        char[] arr=s.toCharArray();
        StringBuilder ans=new StringBuilder();
        Stack<Integer> stack=new Stack<>();
        
        for(int a=0;a<arr.length;a++){

            if(arr[a]=='('){
                stack.push(a);
            } else if(arr[a]==')'){
                start=stack.pop()+1;
                end=a-1;

                reverse(arr,start,end);
            }
        }
        
            for(char a:arr){
                if(a!='(' && a!=')'){

                  ans.append(a);  
                    
                }
            }
        return ans.toString();
    }    
     
     
  
        public void reverse(char[] array1,int a,int b){
            while(a<b){
                char temp=array1[b];
                array1[b]=array1[a];
                array1[a]=temp;
                a++;
                b--;
            }


        }
    }


*******************************************************************************************************



